Trong Java, bạn có thể định nghĩa nhiều hàm (phương thức) với cùng tên nhưng với các tham số khác nhau. Đây là tính năng gọi là **overloading (nạp chồng phương thức)**. Nạp chồng phương thức cho phép bạn tạo nhiều phương thức trong cùng một lớp với cùng tên nhưng khác nhau về loại hoặc số lượng tham số.

### Cách Overloading Phương Thức

Khi sử dụng nạp chồng phương thức, phương thức phải khác nhau về:
- **Số lượng tham số**: Các phương thức có thể có cùng tên nhưng khác nhau về số lượng tham số.
- **Kiểu dữ liệu của tham số**: Các phương thức có thể có cùng tên nhưng khác nhau về kiểu dữ liệu của các tham số.

**Ví dụ về Overloading Phương Thức:**

```java
public class Calculator {

    // Phương thức cộng hai số nguyên
    public int add(int a, int b) {
        return a + b;
    }

    // Phương thức cộng ba số nguyên
    public int add(int a, int b, int c) {
        return a + b + c;
    }

    // Phương thức cộng hai số thực
    public double add(double a, double b) {
        return a + b;
    }
}
```

Trong ví dụ trên:
- Phương thức `add` có ba phiên bản khác nhau:
  - Một phiên bản nhận hai tham số kiểu `int`.
  - Một phiên bản nhận ba tham số kiểu `int`.
  - Một phiên bản nhận hai tham số kiểu `double`.

### Quy tắc về Overloading

1. **Tên phương thức phải giống nhau**: Các phương thức phải có cùng tên để có thể được nạp chồng.
2. **Danh sách tham số phải khác nhau**: Danh sách tham số của các phương thức nạp chồng phải khác nhau về số lượng hoặc loại tham số.
3. **Trả về kiểu không phải là yếu tố phân biệt**: Phương thức không thể chỉ dựa vào kiểu trả về để phân biệt.

**Ví dụ về Vi phạm Quy Tắc Overloading:**

```java
public class Example {

    // Phương thức này không hợp lệ vì chỉ khác nhau về kiểu trả về
    // và không khác nhau về danh sách tham số
    public int getValue() {
        return 5;
    }

    public double getValue() {
        return 5.0;
    }
}
```

### Quy tắc về Overriding

Khác với overloading, **overriding (ghi đè phương thức)** cho phép bạn định nghĩa lại một phương thức từ lớp cha trong lớp con. Các quy tắc cho overriding bao gồm:

- **Tên phương thức phải giống nhau**.
- **Danh sách tham số phải giống nhau**.
- **Kiểu trả về**: Phương thức ghi đè phải có kiểu trả về tương tự hoặc là kiểu trả về con của kiểu trả về phương thức trong lớp cha.
- **Quyền truy cập**: Phương thức ghi đè không được có mức quyền truy cập thấp hơn so với phương thức trong lớp cha.

**Ví dụ về Overriding:**

```java
public class Animal {

    // Phương thức trong lớp cha
    public void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

public class Dog extends Animal {

    // Phương thức ghi đè trong lớp con
    @Override
    public void makeSound() {
        System.out.println("Dog barks");
    }
}
```

Trong ví dụ này:
- `Dog` ghi đè phương thức `makeSound` từ lớp `Animal` để cung cấp một triển khai cụ thể cho loài chó.

Hy vọng điều này giúp bạn hiểu rõ hơn về overloading và overriding trong Java! Nếu bạn có thêm câu hỏi, đừng ngần ngại hỏi thêm.